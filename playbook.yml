---
# task for ssh 
- name: Deploying SSH Key to remote machines
  authorized_key: user={{username}}
                  key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
                  state=present


# tasks file for apache2

- name: Install Apache2
  apt: name=apache2 update_cache=yes state=latest

# Apache2 Configuration
- name: copy vhost to salve
  template:
    src: "laravel.conf.j2"
    dest: "{{path_vhost}}"

- name: Enables new site
  file:
    src: "/etc/apache2/sites-available/laravel.conf"
    dest: "/etc/apache2/sites-enabled/laravel.conf"
    state: link

- name: Removes "default" site
  file:
    path: "/etc/apache2/sites-enabled/000-default.conf"
    state: absent

# handlers file for apache2

- name: Reload apache2
  service:
    name: apache2
    state: reloaded

- name: Restart apache2
  service:
    name: apache2
    state: restarted


# tasks file for composer

- name: Download Composer Installation Script (if not already installed)
  get_url:
    url: https://getcomposer.org/installer
    dest: /tmp/composer-setup.php

- name: Run Composer Installer (if not already installed)
  command:
    cmd: /usr/bin/php /tmp/composer-setup.php
    creates: composer.phar

- name: Copy Composer Executable to /usr/local/bin
  become: true
  copy:
    src: composer.phar
    dest: /usr/local/bin/composer
    remote_src: yes
    mode: '0755'

- name: Remove phar
  file:
    path: composer.phar
    state: absent

- name: Remove Install Script
  file:
    path: /tmp/composer-setup.php
    state: absent



# tasks file for deploy

- name: Set up .env file
  template:
    src: .env.j2
    dest: "{{ remote_www_root }}/{{ app_root_dir }}/.env"

- name: Installing Laravel dependencies
  composer:
    command: install
    working_dir: "{{ remote_www_root }}/{{ app_root_dir }}"
  become: false
  tags: [ 'composer:install' ]
  ignore_errors: yes

- name: Generate app key
  command: "/usr/bin/php {{ remote_www_root }}/{{ app_root_dir }}/artisan key:generate"
  tags: [ 'laravel', 'artisan:key' ]

- name: Set up app storage link
  command: "/usr/bin/php {{ remote_www_root }}/{{ app_root_dir }}/artisan storage:link"
  tags: [ 'laravel', 'artisan:storage' ]

- name: Run Migrations + Seeders
  command: "/usr/bin/php {{ remote_www_root }}/{{ app_root_dir }}/artisan migrate"
  tags: [ 'laravel', 'artisan:migrate' ]

# handlers file for mysql

- name: Restart Mysql
  service:
    name: mysql
    state: restarted


# tasks file for mysql

- name: Install Mysql & mysql-python prereq
  apt: name={{ item }} update_cache=yes state=latest
  loop: [ 'mysql-server', 'python3-pymysql' ]

# Mysql Configuration
- name: Sets the root password
  mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: false

# - name: Removes all anonymous user accounts
#   mysql_user:
#     name: ''
#     host_all: yes
#     state: absent
#     login_unix_socket: /var/run/mysqld/mysqld.sock
#   no_log: false

# - name: Removes the MySQL test database
#   mysql_db:
#     name: test
#     state: absent
#     login_unix_socket: /var/run/mysqld/mysqld.sock

# - name: Creates App Database
#   mysql_db:
#     name: "{{ mysql_app_db }}"
#     state: present
#     login_unix_socket: /var/run/mysqld/mysqld.sock

# - name: Create App MySQL user and grants access to App DB
#   mysql_user:
#     name: "{{ mysql_app_user }}"
#     password: "{{ mysql_app_pass }}"
#     priv: "{{ mysql_app_db }}.*:ALL"
#     state: present
#     login_unix_socket: /var/run/mysqld/mysqld.sock
#   no_log: true

# tasks file for php

- name: Add the packages in sources lists
  command: apt install apt-transport-https lsb-release software-properties-common ca-certificates -y
   
- name: Add the packages in sources lists  
  command: add-apt-repository ppa:ondrej/php -y
 
- name: Update the apt cache
  apt: update_cache=yes cache_valid_time=3600
  
# - name: Add Public key
#   shell: gpg --keyserver pgpkeys.mit.edu --recv-key B188E2B695BD4743

- name: install php8.1
  apt: name="{{php_apt}}" state=latest

- name: php verson
  command: php -v
  
- name: ensure php8-fpm cgi.fix_pathinfo=0
  lineinfile: dest=/etc/php/8.1/apache2/php.ini regexp='^(.*)cgi.fix_pathinfo=' line=cgi.fix_pathinfo=0


# tasks file for setup

- name: update slave server
  command: apt update

- name: install git and git dependencies
  apt:
    name: git
    state: present

- name: print git version
  debug:
    msg: "The current version of git is {{git_version}}"

- name: Clone a github repository
  git:
    dest: "{{ remote_www_root }}/{{ app_root_dir }}"
    repo: "{{git_repo_url}}"

- name: Make sure the remote app root exists and has the right permissions
  file:
    path: "{{ remote_www_root }}/{{ app_root_dir }}"
    state: directory
    mode: '0755'
    owner: "{{ remote_user }}"
    group: "{{ remote_user }}"

- name: Set up additional directory permissions for www-data user on bootstrap/cache folder
  file:
    path: "{{ remote_www_root }}/{{ app_root_dir }}/bootstrap/cache"
    state: directory
    mode: '0777'
    owner: "{{ remote_user }}"
#     recursive: yes    
#     become: yes


- name: Set up additional directory permissions for www-data user on storage folder
  file:
    path: "{{ remote_www_root }}/{{ app_root_dir }}/storage/logs/laravel.log"
    mode: '0777'
    owner: "{{ remote_user }}"
#     recursive: yes
    state: directory
#     become: yes


# tasks file for postgres

 - name: Transfer the script
       copy: src=~/ansible/files/postgres.sh
       dest: /home/ansible
       mode: 0777

    - name: Execute postgress script
      command: sh /home/ansible/files/postgres.sh